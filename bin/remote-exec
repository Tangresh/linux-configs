#!/usr/bin/python3

import argparse
import pathlib
import subprocess
import sys

def which(cmd):
    try:
        out_b = subprocess.check_output(['which', cmd])
        return out_b.decode('utf-8').strip()
    except subprocess.CalledProcessError as e:
        return None

def run_remote(host, cmd, args):
    tmpfile_bytes = subprocess.check_output(['ssh', host, 'mktemp'])
    tmpfile = tmpfile_bytes.decode('utf-8').strip()
    try:
        subprocess.check_output(['scp', '-p', cmd, '{host}:{tmpfile}'.format(host=host, tmpfile=tmpfile)])
        output_b = subprocess.check_output(['ssh', host, tmpfile] + args)
        output = output_b.decode('utf-8').strip()
        print(output)
    finally:
        subprocess.check_output(['ssh', host, 'rm ' + tmpfile])

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Process some integers.')
    #parser.add_argument('-f', '--frequency', type=float, help='Frequency to use for reading in Hz')
    parser.add_argument('host', help='The host connection string')
    parser.add_argument('cmd', help='The program to execute')
    parser.add_argument('args', nargs='*',
                        help='Program arguments')
    args = parser.parse_args()

    if which(args.cmd):
        run_remote(args.host, which(args.cmd), args.args)
        sys.exit(0)

    cmd = pathlib.Path(args.cmd)
    if cmd.is_file():
        run_remote(args.host, str(cmd), args.args)
        sys.exit(0)

    print('No file ' + args.cmd, file=sys.stderr)
    sys.exit(1)
